    1: result = 0
       
    2: class Math:
       
    1:     def __init__(self, arg : str = None):
               global result
       
30004:         if arg is None:
                   self.val = result
               else:
30004:             try:
30004:                 tmp = eval(str(arg).replace('^','**'))
                   except:
                       pass ###
       
30004:             self.val = tmp
30004:             result = self.val
       
    1:     def __add__(self, other):
10000:         tmp = self.val + other.val
10000:         return Math(tmp)
       
    1:     def __sub__(self, other):
               tmp = self.val - other.val
               return Math(tmp)
       
    1:     def __mul__(self, other):
    1:         tmp = self.val * other.val
    1:         return Math(tmp)
       
    1:     def __truediv__(self, other):
    1:         tmp = self.val / other.val
    1:         return Math(tmp)
           
    1:     def __floordiv__(self, other):
               tmp = self.val // other.val
               return Math(tmp)
       
    1:     def __mod__(self, other):
               tmp = self.val % other.val
               return Math(tmp)
       
    1:     def __pow__(self, other):
               tmp = self.val ** other.val
               return Math(tmp) 
       
    1:     def root(self, n=None):
               if n is None:
                   tmp = self.val ** (1/2)
               else:
                   try:
                       if n.is_integer():
                           n = int(n)                
                   except:
                       pass
       
                   if n != 0:
                       tmp = self.val ** (1/n)
                   else:
                       print("Math Error") ####
                       raise ZeroDivisionError
       
               return Math(tmp)
       
    1:     def ln(self):
               n = 100000000.0
               return Math(round(n * ((self.val ** (1/n)) - 1), 8))
       
    1:     def log(self, base):
               n = 100000000.0
               tmp = (n * ((self.val ** (1/n)) - 1)) / (n * ((base ** (1/n)) - 1))
               return Math(round(tmp, 8))
       
    1:     def C(self):
               global result
               result = 0
               return Math()
       
    1:     def factorial(self):
               result = 1
       
               if type(self.val) is float or self.val < 0:
                   #raise "Math Error"
                   return "Math Error"
       
               for i in range(1,int((self.val)+1)):
                   result *= i 
               return Math(result)
       
    1:     def __str__(self):
 9999:         value = self.val
 9999:         try: # If float
 9999:             if value.is_integer():
                       value = int(value)
                   else:
                       value = round(value, 15)
 9999:         except:
 9999:             pass
       
 9999:         return str(value)
